name: Run Test Container

on:
  push:
    branches:
      - "run-test/*"

env:
  IMAGE_NAME: ${{ github.repository }}
  VOICEVOX_RESOURCE_VERSION: "0.22.2"
  VOICEVOX_CORE_VERSION: "0.15.7"

jobs:
  build-docker:
    permissions:
      packages: write
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        # 各変数の説明
        # prefixes: Docker tagのプレフィックス。カンマ区切り。空文字列の場合、バージョン文字列のみがタグ名になる
        # buildcache_prefix: ビルドキャッシュのプレフィックス。空文字列やカンマは使用不可
        # target: Dockerfileのビルドステージ名
        # base_image: Dockerfileのビルド用ステージのベースイメージ
        # base_runtime_image: Dockerfileの実行用ステージのベースイメージ
        # onnxruntime_version: ONNX Runtimeのバージョン
        include:
          # Ubuntu 20.04
          - prefixes: "cpu-ubuntu20.04"
            buildcache_prefix: "cpu-ubuntu20.04"
            target: runtime-env
            base_image: ubuntu:20.04
            base_runtime_image: ubuntu:20.04
            onnxruntime_version: 1.13.1
            platforms: linux/amd64
            os: ubuntu-latest
          - prefixes: "cpu-ubuntu20.04"
            buildcache_prefix: "cpu-ubuntu20.04"
            target: runtime-env
            base_image: ubuntu:20.04
            base_runtime_image: ubuntu:20.04
            onnxruntime_version: 1.13.1
            platforms: linux/arm64/v8
            os: ubuntu-24.04-arm
          - prefixes: "nvidia-ubuntu20.04"
            buildcache_prefix: "nvidia-ubuntu20.04"
            target: runtime-nvidia-env
            base_image: ubuntu:20.04
            base_runtime_image: nvidia/cuda:11.8.0-cudnn8-runtime-ubuntu20.04
            onnxruntime_version: 1.13.1
            platforms: linux/amd64
            os: ubuntu-latest
          # Ubuntu 22.04
          - prefixes: ",cpu,cpu-ubuntu22.04"
            buildcache_prefix: "cpu-ubuntu22.04"
            target: runtime-env
            base_image: ubuntu:22.04
            base_runtime_image: ubuntu:22.04
            onnxruntime_version: 1.13.1
            platforms: linux/amd64
            os: ubuntu-latest
          - prefixes: ",cpu,cpu-ubuntu22.04"
            buildcache_prefix: "cpu-ubuntu22.04"
            target: runtime-env
            base_image: ubuntu:22.04
            base_runtime_image: ubuntu:22.04
            onnxruntime_version: 1.13.1
            platforms: linux/arm64/v8
            os: ubuntu-24.04-arm
          - prefixes: "nvidia,nvidia-ubuntu22.04"
            buildcache_prefix: "nvidia-ubuntu22.04"
            target: runtime-nvidia-env
            base_image: ubuntu:22.04
            base_runtime_image: nvidia/cuda:11.8.0-cudnn8-runtime-ubuntu22.04
            onnxruntime_version: 1.13.1
            platforms: linux/amd64
            os: ubuntu-latest

    steps:
      - name: <Setup> Check out the repository
        uses: actions/checkout@v4

      - name: <Setup> Prepare Python version
        id: prepare-python
        uses: ./.github/actions/prepare_python
        with:
          only-export-python-version: true

      - name: <Setup> Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3

      - name: <Setup> Login to DockerHub
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: <Setup> Prepare VOICEVOX RESOURCE cache
        uses: actions/cache@v4
        id: voicevox-resource-cache
        with:
          key: voicevox-resource-${{ env.VOICEVOX_RESOURCE_VERSION }}
          path: download/resource

      - name: <Setup> Check out the VOICEVOX RESOURCE repository
        if: steps.voicevox-resource-cache.outputs.cache-hit != 'true'
        uses: actions/checkout@v4
        with:
          repository: VOICEVOX/voicevox_resource
          ref: ${{ env.VOICEVOX_RESOURCE_VERSION }}
          path: download/resource

      - name: <Build> Merge VOICEVOX RESOURCE
        env:
          DOWNLOAD_RESOURCE_PATH: download/resource
        run: bash tools/process_voicevox_resource.bash

      - name: <Build> Generate Docker image names
        id: generate-docker-image-names
        run: |
          # Dockerイメージ名を outputs.tags に改行区切りで格納する
          {
            echo "tags<<EOF"

            python3 tools/generate_docker_image_names.py \
              --repository "ghcr.io/${{ env.IMAGE_NAME }}" \
              --prefix "${{ matrix.prefixes }}"

            echo "EOF"
          } >> "$GITHUB_OUTPUT"

      - name: <Build/Deploy> Build and Deploy Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          builder: ${{ steps.buildx.outputs.name }}
          file: ./Dockerfile
          build-args: |
            BASE_IMAGE=${{ matrix.base_image }}
            BASE_RUNTIME_IMAGE=${{ matrix.base_runtime_image }}
            PYTHON_VERSION=${{ steps.prepare-python.outputs.python-version }}
            VOICEVOX_ENGINE_VERSION=latest
            VOICEVOX_CORE_VERSION=${{ env.VOICEVOX_CORE_VERSION }}
            VOICEVOX_RESOURCE_VERSION=${{ env.VOICEVOX_RESOURCE_VERSION }}
            USE_GPU=${{ matrix.target == 'runtime-nvidia-env' }}
            ONNXRUNTIME_VERSION=${{ matrix.onnxruntime_version }}
          target: ${{ matrix.target }}
          push: true
          tags: ${{ steps.generate-docker-image-names.outputs.tags }}
          platforms: ${{ matrix.platforms }}
